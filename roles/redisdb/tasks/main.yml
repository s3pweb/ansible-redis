---

# Setup third-party tools for debugging purpose
- name: Install redis-cli and docker
  apt:
    update_cache: yes
    pkg:
      - redis-tools
      - "{{Â docker_package }}"
      - python3-pip

# Special user to identify traffic from sentinel containers and direct it over haproxy
# This adds haproxy to the monitoring chain and failover will be triggered in a case when haproxy on master went down
- user:
    name: sentinel
    comment: "Used to run Redis Sentinel containers"
    uid: 64446
    shell: /usr/sbin/nologin
    group: nogroup
    create_home: no

- name: Copy redis get-master script
  template: src=../../../scripts/{{item}} dest=/opt/cent/bin/ mode=0755
  with_items:
    - common_redis.py
    - redis-get-master.py

- name: Docker python lib
  pip:
    name: ['docker', 'redis']
    executable: pip3
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version is version('24.04', '<')

- name: Docker python lib
  apt:
    package:
      - python3-docker
      - python3-redis
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version is version('24.04', '>=')

# Disable Transparent Huge Pages
- name: Inject kernel.mm.transparent_hugepage
  shell: "echo never > /sys/kernel/mm/transparent_hugepage/enabled && touch {{ansible_env.HOME}}/.kernel.mm.transparent_hugepage.never"
  args:
    creates: "{{ansible_env.HOME}}/.kernel.mm.transparent_hugepage.never"

- name: Check grub is installed
  ansible.builtin.stat:
    path: /etc/default/grub
  register: grub_stat

- name: Ensure auditing for processes that start prior to auditd is enabled 1/2 (configure grub)
  replace:
    path: /etc/default/grub
    regexp: 'GRUB_CMDLINE_LINUX_DEFAULT=""'
    replace: 'GRUB_CMDLINE_LINUX_DEFAULT="console=tty1 console=ttyS0 transparent_hugepage=never"'
  register: grub
  when: grub_stat.stat.exists

- name: Ensure auditing for processes that start prior to auditd is enabled 2/2 (update initrd image)
  shell: update-grub
  when: grub_stat.stat.exists and grub.changed

# Add reserved ports we use to the ephemeral range
- name: Reserve tcp ports in ephemeral port range
  sysctl: >
    name=net.ipv4.ip_local_reserved_ports
    value="36379-36479,46379-46479,56379-56479,63790-63890"
    state=present
    ignoreerrors=yes

# Enable vm.overcommit_memory, recommended by Redis
- name: Enable vm.overcommit_memory
  sysctl: >
    name=vm.overcommit_memory
    value=1
    state=present
    ignoreerrors=yes

# Increase "net/core" subsys registered per network namespace
- name: Increase net.core.somaxconn
  sysctl: >
    name=net.core.somaxconn
    value=65535
    state=present
    ignoreerrors=yes

# Setup Redis
- name: Pull docker images
  command: docker pull {{item}}
  with_items:
    - "{{redis_image}}:{{redis_version}}"
    - "{{haproxy_image}}:{{haproxy_version}}"
  register: docker_pull
  changed_when: '"Downloaded newer image" in docker_pull.stdout'

- name: Iterate over services
  include_tasks: service.yml
  with_dict:
    - "{{services}}"
  loop_control:
    loop_var: service_item
  vars:
    service: "{{service_item.key}}"

# Setup redis-commander
- name: Install redis-commander.json
  template: src=redis-commander.json dest=/opt/redis/ mode=0640 group=nogroup
  register: redis_commander_conf
  when: enable_commander

- name: Start redis-commander container
  docker_container:
    name: redis-commander
    labels: {"name": "redis-commander"}
    image: "{{redis_commander_image}}:{{redis_commander_version}}"
    state: started
    restart_policy: always
    network_mode: host
    user: 65534:65534
    read_only: True
    env:
      USE_SCAN=true
      NODE_EXTRA_CA_CERTS=/example.crt
    volumes:
      - /data/example.crt:/example.crt:ro
      - /opt/redis/redis-commander.json:/redis-commander/config/local-production.json:ro
  when: enable_commander

- name: Restart redis-commander
  command: docker restart redis-commander

- name: Start haproxy_exporter container
  docker_container:
    name: haproxy_exporter
    labels: {"name": "haproxy_exporter"}
    image: "{{haproxy_exporter_image}}:{{haproxy_exporter_version}}"
    command: >
      --web.listen-address=127.0.0.1:9101
      --haproxy.scrape-uris="{% for service in services -%}tcp://127.0.0.1:{{haproxy_api_port + services[service]['port_offset']}}/{{service}}{%- if not loop.last -%},{%- endif -%}{% endfor %}"
    state: started
    restart_policy: always
    network_mode: host
    user: 65534:65534
    read_only: True
  when: enable_exporters

- name: Install pip packages
  pip: name={{ packages }} umask=0022 executable=pip3 state=latest
  vars:
    packages:
    - redis
  when: enable_backup and ansible_distribution == 'Ubuntu' and ansible_distribution_version is version('24.04', '<')

- name: Install pip packages
  apt:
    package:
      - python3-redis
  when: enable_backup and ansible_distribution == 'Ubuntu' and ansible_distribution_version is version('24.04', '>=')

- name: Copy redis backup script
  copy: src=../../../{{item}} dest=/opt/ mode=0755
  with_items:
    - scripts/common_redis.py
    - scripts/redis-backup.py
  when: enable_backup

- name: Copy redis backup config
  template: src=redis-backup-config.yml dest=/opt/ mode=0600
  when: enable_backup

- set_fact:
    run_minute="{{ 14|random(seed=inventory_hostname) }}"
  when: enable_backup

- name: Install `cron` package
  apt:
    name: cron
    state: present

- name: Add redis-backup cron
  cron:
    name: redis-backup
    cron_file: backups
    user: root
    minute: "{{run_minute}},{{run_minute|int + 15}},{{run_minute|int + 30}},{{run_minute|int + 45}}"
    job: "/opt/redis-backup.py >> /tmp/redis-backup.out 2>&1"
  when: enable_backup


